// Chemin : services/authService.ts

import axios from 'axios';
// @ts-ignore
import { API_URL } from '@env';

/**
 * Service d'authentification COMPLET avec v√©rifications en temps r√©el
 * Compatible avec votre structure existante
 */

// Fonction de connexion existante (inchang√©e)
export const login = async (email: string, password: string) => {
  return await axios.post(`${API_URL}/auth/login`, { email, password });
};

// Fonction d'inscription existante (inchang√©e)
export const register = async (email: string, password: string, lastName: string, firstName: string, username: string, photoUrls: string[], cityData: { nom_commune: string; code_postal: string; latitude: number; longitude: number }) => {
  return await axios.post(`${API_URL}/auth/signup`, {
    email,
    password,
    lastName,
    firstName,
    username,
    photoUrls,
    ...cityData,
  });
};

/**
 * NOUVELLE FONCTION: V√©rification de la disponibilit√© d'un nom d'utilisateur
 * @param username - Le nom d'utilisateur √† v√©rifier
 * @returns Promise<boolean> - true si disponible, false si pris
 */
export const checkUsernameAvailability = async (username: string): Promise<boolean> => {
  try {
    // Validation c√¥t√© client
    if (!username || username.trim().length < 3) {
      throw new Error('Le nom d\'utilisateur doit contenir au moins 3 caract√®res');
    }

    console.log(`üîç V√©rification disponibilit√© username: ${username}`);

    // Appel API pour v√©rifier l'unicit√©
    const response = await axios.post(`${API_URL}/auth/check-username`, {
      username: username.trim().toLowerCase()
    });

    // Si la requ√™te passe, le username est disponible
    console.log(`‚úÖ Username "${username}" disponible`);
    return true;

  } catch (error: any) {
    
    // Gestion sp√©cifique des erreurs HTTP
    if (error.response) {
      const status = error.response.status;
      
      if (status === 409) {
        // 409 Conflict = nom d'utilisateur d√©j√† pris
        console.log(`‚ùå Username "${username}" d√©j√† pris`);
        return false;
      } else if (status === 400) {
        // 400 Bad Request = donn√©es invalides
        throw new Error('Nom d\'utilisateur invalide');
      } else if (status >= 500) {
        // Erreur serveur
        throw new Error('Erreur serveur. Veuillez r√©essayer.');
      }
    }
    
    // En cas d'erreur r√©seau, on peut choisir de retourner true 
    // pour ne pas bloquer l'utilisateur (√† ajuster selon vos besoins)
    if (error.code === 'NETWORK_ERROR' || error.message.includes('Network')) {
      console.warn('Probl√®me de connexion r√©seau - autorisation par d√©faut');
      return true;
    }
    
    throw error;
  }
};

/**
 * NOUVELLE FONCTION: V√©rification de la disponibilit√© d'une adresse email
 * @param email - L'email √† v√©rifier
 * @returns Promise<boolean> - true si disponible, false si pris
 */
export const checkEmailAvailability = async (email: string): Promise<boolean> => {
  try {
    // Validation c√¥t√© client
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    if (!email || !emailRegex.test(email)) {
      throw new Error('Format d\'email invalide');
    }

    console.log(`üîç V√©rification disponibilit√© email: ${email}`);

    // Appel API pour v√©rifier l'unicit√©
    const response = await axios.post(`${API_URL}/auth/check-email`, {
      email: email.trim().toLowerCase()
    });

    // Si la requ√™te passe, l'email est disponible
    console.log(`‚úÖ Email "${email}" disponible`);
    return true;

  } catch (error: any) {
    
    // Gestion sp√©cifique des erreurs HTTP
    if (error.response) {
      const status = error.response.status;
      
      if (status === 409) {
        // 409 Conflict = email d√©j√† utilis√©
        console.log(`‚ùå Email "${email}" d√©j√† utilis√©`);
        return false;
      } else if (status === 400) {
        // 400 Bad Request = donn√©es invalides
        throw new Error('Adresse email invalide');
      } else if (status >= 500) {
        // Erreur serveur
        throw new Error('Erreur serveur. Veuillez r√©essayer.');
      }
    }
    
    // En cas d'erreur r√©seau, on peut choisir de retourner true 
    // pour ne pas bloquer l'utilisateur (√† ajuster selon vos besoins)
    if (error.code === 'NETWORK_ERROR' || error.message.includes('Network')) {
      console.warn('Probl√®me de connexion r√©seau - autorisation par d√©faut');
      return true;
    }
    
    throw error;
  }
};

/**
 * NOUVELLE FONCTION: V√©rification batch (nom d'utilisateur + email en une seule fois)
 * Utile pour la v√©rification finale avant inscription
 * @param username - Le nom d'utilisateur
 * @param email - L'email
 * @returns Promise<{usernameAvailable: boolean, emailAvailable: boolean}>
 */
export const checkBothAvailability = async (username: string, email: string): Promise<{
  usernameAvailable: boolean;
  emailAvailable: boolean;
}> => {
  try {
    console.log(`üîç V√©rification group√©e username: ${username}, email: ${email}`);

    const response = await axios.post(`${API_URL}/auth/check-both`, {
      username: username.trim().toLowerCase(),
      email: email.trim().toLowerCase()
    });

    const result = {
      usernameAvailable: response.data?.usernameAvailable || false,
      emailAvailable: response.data?.emailAvailable || false,
    };

    console.log('‚úÖ V√©rification group√©e termin√©e:', result);
    return result;

  } catch (error: any) {
    console.error('Erreur lors de la v√©rification group√©e:', error);
    
    // En cas d'erreur, faire les v√©rifications s√©par√©ment
    console.log('üîÑ Fallback: v√©rifications s√©par√©es...');
    
    try {
      const [usernameResult, emailResult] = await Promise.allSettled([
        checkUsernameAvailability(username),
        checkEmailAvailability(email)
      ]);

      return {
        usernameAvailable: usernameResult.status === 'fulfilled' ? usernameResult.value : false,
        emailAvailable: emailResult.status === 'fulfilled' ? emailResult.value : false,
      };
    } catch (fallbackError) {
      console.error('Erreur dans le fallback:', fallbackError);
      
      // En dernier recours, retourner false pour √™tre s√ªr
      return {
        usernameAvailable: false,
        emailAvailable: false,
      };
    }
  }
};

// Export par d√©faut d'un objet avec toutes les fonctions
const authService = {
  login,
  register,
  checkUsernameAvailability,
  checkEmailAvailability,
  checkBothAvailability,
};

export default authService;