/**
 * reportHelpers.ts
 * 
 * Module de configuration et d'utilitaires pour la gestion des signalements
 * Inclut des types, constantes, couleurs et fonctions pour manipuler les donn√©es de signalements
 */

import axios from "axios";
import React from "react";
// @ts-ignore - R√©cup√©ration des variables d'environnement
import { API_URL } from "@env";

/**
 * Types de signalements support√©s par l'application
 */
export type ReportType = 'danger' | 'travaux' | 'nuisance' | 'pollution' | 'reparation';

/**
 * Structure d√©finissant une cat√©gorie de signalement avec ses m√©tadonn√©es
 */
export interface ReportCategory {
  name: string;
  icon: string;
  value: ReportType;
  article: string;
  description: string;
}

/**
 * Syst√®me de couleurs sophistiqu√© pour l'application
 * Palette optimis√©e pour l'accessibilit√© et le professionnalisme
 */
export const COLORS = {
  // Couleurs primaires de l'application
  primary: "#1A4B8C",      // Bleu profond institutionnel
  secondary: "#2D3142",    // Gris-bleu neutre 
  
  // Couleurs d'interface de base
  text: {
    primary: "#2D3142",    // Texte principal
    secondary: "#545B70",  // Texte secondaire
    tertiary: "#8E94A8",   // Texte tertiaire
    inverse: "#FFFFFF"     // Texte sur fond sombre
  },
  background: {
    main: "#F8F9FD",       // Fond d'√©cran principal
    paper: "#FFFFFF",      // Fond pour cartes et surfaces
    elevated: "#F0F2F8"    // Fond avec √©l√©vation (liste, etc.)
  },
  border: {
    light: "#E4E6ED",      // Bordure l√©g√®re
    medium: "#D1D5E0"      // Bordure moyenne
  },
  
  // √âtats de l'interface
  state: {
    success: "#2E7D6E",    // Vert soutenu pour confirmations
    info: "#345995",       // Bleu informatif
    disabled: "#C5CAD6"    // √âl√©ments d√©sactiv√©s
  },
  
  // Syst√®me de couleurs pour les cat√©gories avec variantes
  categories: {
    danger: {
      main: "#C8372D",     // Rouge vif mais sophistiqu√© 
      light: "#F2DBD9",    // Fond pour cartes danger
      dark: "#92281F",     // Accentuation et contraste
      opacity: "rgba(200, 55, 45, 0.1)" // Pour overlays et backgrounds subtils
    },
    travaux: {
      main: "#DD8E31",     // Orange terre plus professionnel
      light: "#F8ECDC",    // Fond pour cartes travaux
      dark: "#A46924",     // Accentuation et contraste
      opacity: "rgba(221, 142, 49, 0.1)" // Pour overlays et backgrounds subtils
    },
    nuisance: {
      main: "#8655AB",     // Violet pos√© et institutionnel
      light: "#E8DEF0",    // Fond pour cartes nuisance
      dark: "#5E3C79",     // Accentuation et contraste
      opacity: "rgba(134, 85, 171, 0.1)" // Pour overlays et backgrounds subtils
    },
    pollution: {
      main: "#27746B",     // Vert-bleu profond et s√©rieux
      light: "#D8E9E8",    // Fond pour cartes pollution
      dark: "#1E5A53",     // Accentuation et contraste
      opacity: "rgba(39, 116, 107, 0.1)" // Pour overlays et backgrounds subtils
    },
    reparation: {
      main: "#156CB3",     // Bleu technique fiable
      light: "#D8E8F6",    // Fond pour cartes r√©paration
      dark: "#0E4F82",     // Accentuation et contraste
      opacity: "rgba(21, 108, 179, 0.1)" // Pour overlays et backgrounds subtils
    }
  }
};

/**
 * Mapping des couleurs principales pour chaque type de signalement
 */
export const typeColors: Record<ReportType, string> = {
  danger: COLORS.categories.danger.main,
  travaux: COLORS.categories.travaux.main,
  nuisance: COLORS.categories.nuisance.main,
  pollution: COLORS.categories.pollution.main,
  reparation: COLORS.categories.reparation.main,
};

/**
 * Mapping des couleurs d'arri√®re-plan l√©g√®res pour chaque type
 */
export const typeBackgroundColors: Record<ReportType, string> = {
  danger: COLORS.categories.danger.light,
  travaux: COLORS.categories.travaux.light,
  nuisance: COLORS.categories.nuisance.light,
  pollution: COLORS.categories.pollution.light,
  reparation: COLORS.categories.reparation.light,
};

/**
 * Mapping des couleurs fonc√©es pour accentuation/hover pour chaque type
 */
export const typeDarkColors: Record<ReportType, string> = {
  danger: COLORS.categories.danger.dark,
  travaux: COLORS.categories.travaux.dark,
  nuisance: COLORS.categories.nuisance.dark,
  pollution: COLORS.categories.pollution.dark,
  reparation: COLORS.categories.reparation.dark,
};

/**
 * Mapping des couleurs pour les graphiques et visualisations
 */
export const chartColors: Record<ReportType | string, string> = {
  danger: COLORS.categories.danger.main,
  travaux: COLORS.categories.travaux.main,
  nuisance: COLORS.categories.nuisance.main,
  pollution: COLORS.categories.pollution.main,
  reparation: COLORS.categories.reparation.main,
  r√©paration: COLORS.categories.reparation.main, // Pour la r√©trocompatibilit√©
};

/**
 * Libell√©s format√©s pour chaque type de signalement
 */
export const typeLabels: Record<ReportType, string> = {
  danger: 'Danger',
  travaux: 'Travaux',
  nuisance: 'Nuisance',
  pollution: 'Pollution',
  reparation: 'Maintenance',
};

/**
 * Mapping des types de signalements vers les emojis
 */
export const typeEmojis: Record<ReportType, string> = {
  danger: '‚ö†Ô∏è',
  travaux: 'üöß',
  nuisance: 'üò°',
  pollution: 'üåç',
  reparation: '‚öôÔ∏è',
};

/**
 * Mapping des types de signalements vers les noms d'ic√¥nes
 * Compatible avec Ionicons (peut √™tre adapt√© √† d'autres biblioth√®ques)
 */
export const typeIcons: Record<ReportType, string> = {
  danger: 'warning-outline',
  travaux: 'construct-outline',
  nuisance: 'volume-high-outline',
  pollution: 'leaf-outline',
  reparation: 'build-outline',
};

/**
 * Descriptions d√©taill√©es pour chaque type de signalement
 */
export const categoryDescriptions: Record<ReportType, string> = {
  danger: "Signale une situation pr√©sentant un risque imm√©diat pour les habitants.",
  travaux: "Indique des travaux en cours ou pr√©vus, pouvant impacter la circulation.",
  nuisance: "Signale des nuisances sonores, olfactives ou visuelles affectant le voisinage.",
  pollution: "Informe d'une pollution environnementale comme des d√©chets ou des √©missions toxiques.",
  reparation: "Indique des infrastructures n√©cessitant une r√©paration urgente ou en cours de r√©paration.",
};

/**
 * D√©finitions compl√®tes des cat√©gories de signalements
 * Inclut nom, ic√¥ne, valeur, article et description d√©taill√©e pour chaque type
 */
export const categories: ReportCategory[] = [
  {
    name: 'Danger',
    icon: 'warning-outline',
    value: 'danger',
    article: 'un danger',
    description: `Pouvant affecter la s√©curit√© des habitants :

- Objets dangereux sur la voie publique (ex. c√¢bles tomb√©s, verre bris√©)
- Zones instables ou dangereuses (ex. glissements de terrain, structures mena√ßant de s'effondrer)
- Situations √† haut risque (ex. incendies, inondations, zones non s√©curis√©es)`,
  },
  {
    name: 'Travaux',
    icon: 'construct-outline',
    value: 'travaux',
    article: 'des travaux',
    description: `Publics ou priv√©s susceptibles d'impacter la ville :

- Fermetures de routes ou rues (ex. travaux de r√©fection, pose de r√©seaux souterrains)
- Perturbations des transports ou d√©viations (ex. encombrements li√©s aux chantiers)
- Travaux g√©n√©rant du bruit ou des nuisances (ex. chantiers de nuit, vibrations excessives)`,
  },
  {
    name: 'Nuisance',
    icon: 'volume-high-outline',
    value: 'nuisance',
    article: 'une nuisance',
    description: `G√™nes perturbant la tranquillit√© de la ville :

- Bruit excessif (ex. travaux nocturnes, f√™tes bruyantes)
- Pollution olfactive ou visuelle (ex. odeurs naus√©abondes, graffiti non autoris√©)
- Comportements inappropri√©s (ex. regroupements bruyants, d√©gradations dans les espaces publics)`,
  },
  {
    name: 'Pollution',
    icon: 'leaf-outline',
    value: 'pollution',
    article: 'de la pollution',
    description: `Identifiez les sources de pollution affectant l'environnement ou la sant√© publique :

- D√©p√¥ts sauvages ou d√©charges ill√©gales (ex. d√©chets abandonn√©s, encombrants non ramass√©s)
- √âmissions toxiques (ex. fum√©es industrielles, odeurs chimiques)
- Pollution des ressources naturelles (ex. cours d'eau contamin√©s, sols pollu√©s)`,
  },
  {
    name: 'R√©paration',
    icon: 'build-outline',
    value: 'reparation',
    article: 'une r√©paration',
    description: `Infrastructure n√©cessitant une maintenance urgente :

- Pannes d'√©clairage public (ex. lampadaires non fonctionnels)
- √âquipements d√©fectueux (ex. feux tricolores en panne, mobiliers urbains endommag√©s)
- Infrastructures ab√Æm√©es (ex. trottoirs fissur√©s, routes avec nids-de-poule)
- Espaces publics d√©t√©rior√©s (ex. bancs cass√©s, panneaux de signalisation d√©grad√©s)`,
  },
];

/**
 * Interface pour les param√®tres de la fonction handleVote
 */
interface VoteParams {
  reportId: number;
  userId: number;
  type: string;
  latitude: number;
  longitude: number;
  currentVotes: number | undefined;
  setVotes: React.Dispatch<React.SetStateAction<number | undefined>>;
}

/**
 * G√®re le vote sur un signalement avec mise √† jour optimiste de l'UI
 * 
 * @param params - Param√®tres n√©cessaires pour traiter le vote
 * @returns Promise<void>
 */
export const handleVote = async ({
  reportId,
  userId,
  type,
  latitude,
  longitude,
  currentVotes,
  setVotes
}: VoteParams): Promise<void> => {
  try { 
    // Mise √† jour optimiste de l'interface utilisateur
    const newVotes = type === "up" ? (currentVotes || 0) + 1 : (currentVotes || 0) - 1;
    setVotes(newVotes);
 
    const payload = {
      reportId,
      userId,
      type,
      latitude,
      longitude,
    };
    
    // Envoi de la requ√™te au backend
    const response = await axios.post(`${API_URL}/reports/vote`, payload);
    
    // Mise √† jour avec la valeur r√©elle retourn√©e par le serveur
    if (response.data.updatedVotes !== undefined) {
      setVotes(response.data.updatedVotes);
    }
  } catch (error) {
    console.error("Erreur lors de l'envoi du vote :", error.response?.data || error);
    // Annulation de la mise √† jour optimiste en cas d'erreur
    setVotes(currentVotes);
  }
};

/**
 * R√©cup√®re le libell√© format√© d'un type de signalement
 * 
 * @param type - Type de signalement
 * @returns Libell√© format√©
 */
export const getTypeLabel = (type: string): string => {
  return typeLabels[type as ReportType] || type;
};

/**
 * R√©cup√®re l'emoji correspondant √† un type de signalement
 * 
 * @param type - Type de signalement
 * @returns Emoji correspondant
 */
export const getTypeEmoji = (type: string): string => {
  return typeEmojis[type as ReportType] || '‚ùì';
};

/**
 * R√©cup√®re le nom de l'ic√¥ne pour un type de signalement
 * 
 * @param type - Type de signalement
 * @returns Nom de l'ic√¥ne √† utiliser
 */
export const getTypeIcon = (type: string): string => {
  return typeIcons[type as ReportType] || 'help-circle-outline';
};

/**
 * R√©cup√®re toutes les informations visuelles pour un type de signalement
 * 
 * @param type - Type de signalement
 * @returns Objet contenant l'emoji, l'ic√¥ne et les variantes de couleurs
 */
export const getTypeVisuals = (type: string) => {
  const reportType = type as ReportType;
  const emoji = getTypeEmoji(type);
  const iconName = getTypeIcon(type);
  
  // R√©cup√©ration des couleurs avec fallback
  const color = typeColors[reportType] || COLORS.text.primary;
  const backgroundColor = typeBackgroundColors[reportType] || COLORS.background.elevated;
  const darkColor = typeDarkColors[reportType] || COLORS.secondary;
  
  return { 
    emoji, 
    iconName, 
    color,
    backgroundColor,
    darkColor
  };
};

/**
 * G√©n√®re une couleur avec opacit√© pour un type donn√©
 * 
 * @param type - Type de signalement
 * @param opacity - Valeur d'opacit√© (0-1)
 * @returns Couleur avec opacit√© au format rgba
 */
export const getTypeColorWithOpacity = (type: string, opacity: number): string => {
  const reportType = type as ReportType;
  const hexColor = typeColors[reportType] || COLORS.text.primary;
  
  // Conversion hex vers rgb pour appliquer l'opacit√©
  const r = parseInt(hexColor.slice(1, 3), 16);
  const g = parseInt(hexColor.slice(3, 5), 16);
  const b = parseInt(hexColor.slice(5, 7), 16);
  
  return `rgba(${r}, ${g}, ${b}, ${opacity})`;
};

/**
 * D√©termine si une couleur est suffisamment claire pour utiliser du texte fonc√©
 * 
 * @param hexColor - Couleur au format hexad√©cimal
 * @returns Boolean indiquant si la couleur est claire
 */
export const isLightColor = (hexColor: string): boolean => {
  const r = parseInt(hexColor.slice(1, 3), 16);
  const g = parseInt(hexColor.slice(3, 5), 16);
  const b = parseInt(hexColor.slice(5, 7), 16);
  
  // Calcul de la luminosit√© per√ßue (formule standard)
  const luminance = (0.299 * r + 0.587 * g + 0.114 * b) / 255;
  
  return luminance > 0.5; // Seuil de 0.5 pour d√©terminer si clair ou fonc√©
};

/**
 * D√©termine la couleur de texte √† utiliser sur un fond color√©
 * 
 * @param backgroundColor - Couleur d'arri√®re-plan
 * @returns Couleur de texte appropri√©e (clair ou fonc√©)
 */
export const getContrastTextColor = (backgroundColor: string): string => {
  return isLightColor(backgroundColor) 
    ? COLORS.text.primary   // Texte fonc√© sur fond clair
    : COLORS.text.inverse;  // Texte clair sur fond fonc√©
};